# Scalar common types
scalar Date
scalar JSON

# _prtcl first-class citizens 
type Context {
  id: ID!

  creator: ID!
  timestamp: Date!
  nonce: Int!

  # Soft links
  perspectives: [Perspective!]!
}

type Perspective {
  id: ID!

  name: String!
  creator: ID!
  context: Context!

  # Soft link
  head: Commit!
}

type Commit {
  id: ID!

  message: String
  creator: ID!
  nonce: Int!
  timestamp: Date!

  # Hard links
  parents: [Commit!]!
  # Hard link
  content: Content!
}

type Content {
  id: ID!

  # Hard links
  data: ID!
  # Hard links
  links: [Link!]!
}

# Links can point to Perspectives or to Commits
union Linkable = Perspective | Commit

type Link {
  position: JSON
  link: Linkable! 
}


# Query type
type Query {
  # This is the root context of the user
  root: Context
  # Ask for any first-class citizens given its ID
  context(id: ID!): Context
  perspective(id: ID!): Perspective
  commit(id: ID!): Commit
  content(id: ID!): Content
}